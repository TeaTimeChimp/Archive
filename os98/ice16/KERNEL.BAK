.386p

include debug.i
include pe\pe.i


segment _DATA public use32 'DATA'

	Text_Startup	db	'ICE32 Version 3.00.000',0

ends _DATA


segment _TEXT public use32 'CODE'
assume cs:_TEXT

;Declaration of public functions.
global _main32:near


	;--------------------------------------------------------
	; Purpose	: Entry point for 32-bit code.
	;
	; Author	: Daniel J Hawkins
	;
	; Date		: 15/01/98
	;
	; Inputs	:  bx  = Selector of global code segment.
	;			   cx  = Selector of global data segment.
	;		  	   edx = Physical address of PE image.
	;
	;
	; Modification History
	; Date		Initials	Reason
	;
	;--------------------------------------------------------
	proc _main32

		; Initialise all data segments to global segment for flat mode.
		cli
		mov		ds, cx
		mov		es, cx
		mov		fs, cx
		mov		gs, cx
		mov		ss, cx

	egg:
    	jmp		egg

		; Initialise stack pointer at top of second megabyte.
		mov		esp, 000300000h-4

		; Get base address of CS segment.
		sgdt	pword ptr ss:[esp-08]
		mov		esi, ss:[esp-06]
		mov		ax, cs
		and		eax, 00000fff8h
		add		esi, eax
		mov		ah, [esi+7]
		mov		al, [esi+4]
		shl		eax, 16
		mov		ax, [esi+2]
		add		eax, offset flatmain32

		; Restart in 32-bit flat code segment.
		push	ebx
		push	eax
		retf
	flatmain32:

		; Relocate data segment to first megabyte to maintain
		; correct offsets generated by the compiler.
		mov		esi, _TEXT
		shl		esi, 4
		mov		edi, 0
		mov		ecx, 4096
		cld
		rep		movsd

		; Initialise debugging module.
		call	Debug_initialise

		; Display startup message.
		mov		esi, offset _TEXT:Text_Startup
		call	Debug_writeString

		; Map kernel image to physical memory.
		mov		ebx, edx
		call	PE_MapImage
		jc		M32_failed
		call	PE_Initialise
		jc		M32_failed

		; Execute PE image.
		call	eax

	M32_success:
		mov		edi, 0b8000h
		mov		byte ptr [edi+00], 'S'
		mov		byte ptr [edi+02], 'U'
		mov		byte ptr [edi+04], 'C'
		mov		byte ptr [edi+06], 'C'
		mov		byte ptr [edi+08], 'E'
		mov		byte ptr [edi+10], 'S'
		mov		byte ptr [edi+12], 'S'
		jmp		M32_panic

	M32_failed:
		mov		edi, 0b8000h
		mov		byte ptr [edi+00], 'F'
		mov		byte ptr [edi+02], 'A'
		mov		byte ptr [edi+04], 'I'
		mov		byte ptr [edi+06], 'L'
		mov		byte ptr [edi+08], 'E'
		mov		byte ptr [edi+10], 'D'

	M32_panic:
		jmp		M32_panic

	endp _main32

ends _TEXT

end
